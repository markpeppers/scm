; Exercise 2.1
(define (make-rat numer denom)
  (define (positive? x) (or (> x 0) (= x 0)))
  (let ((g (gcd numer denom))
	(sign (cond ((and (positive? numer) (not (positive? denom))) -1)
		    ((and (not (positive? numer)) (positive? denom)) -1)
		    (else 1))))
    (cons (* sign (/ (abs numer) g)) (/ (abs denom) g))))
(define (numer n)
  (car n))
(define (denom n)
  (cdr n))

(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
	       (* (numer y) (denom x)))
	    (* (denom x) (denom y))))
(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
	       (* (numer y) (denom x)))
	    (* (denom x) (denom y))))
(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
	    (* (denom x) (denom y))))
(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
	    (* (denom x) (numer y))))
(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))
(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))

